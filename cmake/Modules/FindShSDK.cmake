# - Try to find ShSDK
# Once done this will define
#  SHSDK_FOUND - System has ShSDK
#  SHSDK_INCLUDE_DIRS - The ShSDK include directories
#  SHSDK_LIBRARIES - The libraries needed to use ShSDK

find_path(SDK_HEADER "ShSDK/ShSDK.h" HINTS ${SHSDK_INCLUDE_DIR} PATHS /usr/local/)

macro(FIND_SHSDK_LIBRARY _var)
	find_library(${_var} NAMES ${ARGN} HINTS ${SHSDK_LIB_DIR})
	mark_as_advanced(${_var})
endmacro()

# ------------------------------------------------------------------------------------------------

FIND_SHSDK_LIBRARY(SHSDK_LIBRARY_MASTER ShSDK)

if (SHSDK_LIBRARY_MASTER)

	set(SHSDK_LIBRARY ${SHSDK_LIBRARY_MASTER})

else (SHSDK_LIBRARY_MASTER)

	FIND_SHSDK_LIBRARY(SHSDK_LIBRARY_RELEASE ShSDK_Release)
	FIND_SHSDK_LIBRARY(SHSDK_LIBRARY_DEBUG ShSDK_Debug)

	# Both are found
	if (SHSDK_LIBRARY_DEBUG AND SHSDK_LIBRARY_RELEASE)
		set(SHSDK_LIBRARY debug ${SHSDK_LIBRARY_DEBUG} optimized ${SHSDK_LIBRARY_RELEASE})
	endif (SHSDK_LIBRARY_DEBUG AND SHSDK_LIBRARY_RELEASE)

	# Only Release
	if (SHSDK_LIBRARY_RELEASE AND NOT SHSDK_LIBRARY_DEBUG)
		set(SHSDK_LIBRARY ${SHSDK_LIBRARY_RELEASE})
	endif (SHSDK_LIBRARY_RELEASE AND NOT SHSDK_LIBRARY_DEBUG)

	# Only Debug
	if (SHSDK_LIBRARY_DEBUG AND NOT SHSDK_LIBRARY_RELEASE)
		set(SHSDK_LIBRARY ${SHSDK_LIBRARY_DEBUG})
	endif (SHSDK_LIBRARY_DEBUG AND NOT SHSDK_LIBRARY_RELEASE)

endif (SHSDK_LIBRARY_MASTER)

# ------------------------------------------------------------------------------------------------

FIND_SHSDK_LIBRARY(SHSDK_EDITOR_LIBRARY_MASTER ShSDK_Editor)

if (SHSDK_EDITOR_LIBRARY_MASTER)

	set(SHSDK_EDITOR_LIBRARY ${SHSDK_EDITOR_LIBRARY_MASTER})

else (SHSDK_EDITOR_LIBRARY_MASTER)

	FIND_SHSDK_LIBRARY(SHSDK_EDITOR_LIBRARY_RELEASE ShSDK_Editor_Release)
	FIND_SHSDK_LIBRARY(SHSDK_EDITOR_LIBRARY_DEBUG ShSDK_Editor_Debug)

	# Both are found
	if (SHSDK_EDITOR_LIBRARY_DEBUG AND SHSDK_LIBRARY_RELEASE)
		set(SHSDK_EDITOR_LIBRARY debug ${SHSDK_EDITOR_LIBRARY_DEBUG} optimized ${SHSDK_EDITOR_LIBRARY_RELEASE})
	endif (SHSDK_EDITOR_LIBRARY_DEBUG AND SHSDK_LIBRARY_RELEASE)

	# Only Release
	if (SHSDK_EDITOR_LIBRARY_RELEASE AND NOT SHSDK_EDITOR_LIBRARY_DEBUG)
		set(SHSDK_EDITOR_LIBRARY ${SHSDK_EDITOR_LIBRARY_RELEASE})
	endif (SHSDK_EDITOR_LIBRARY_RELEASE AND NOT SHSDK_EDITOR_LIBRARY_DEBUG)

	# Only Debug
	if (SHSDK_EDITOR_LIBRARY_DEBUG AND NOT SHSDK_EDITOR_LIBRARY_RELEASE)
		set(SHSDK_EDITOR_LIBRARY ${SHSDK_EDITOR_LIBRARY_DEBUG})
	endif (SHSDK_EDITOR_LIBRARY_DEBUG AND NOT SHSDK_EDITOR_LIBRARY_RELEASE)

endif (SHSDK_EDITOR_LIBRARY_MASTER)

# ------------------------------------------------------------------------------------------------

set(SHSDK_LIBRARIES "${SHSDK_LIBRARY}")
set(SHSDK_EDITOR_LIBRARIES "${SHSDK_EDITOR_LIBRARY}")
set(SHSDK_INCLUDE_DIRS "${SHSDK_INCLUDE_DIR}")

if (ANDROID)

	# TODO

elseif (APPLE)

	# TODO

elseif (UNIX) # Not Android and not Apple ... must be Linux or BSD

	find_package(Threads QUIET)
	find_package(OpenGL QUIET)
	find_package(OpenAL QUIET)
	find_package(X11 QUIET)

	list(APPEND SHSDK_LIBRARIES "${OPENGL_LIBRARIES}" "${X11_LIBRARIES}" "${OPENAL_LIBRARY}" "${CMAKE_THREAD_LIBS_INIT}")

elseif (WIN32)

	find_package(DirectX9 QUIET)
	find_package(XAudio QUIET)
	find_package(XInput QUIET)

	list(APPEND SHSDK_INCLUDE_DIRS "${DirectX9_INCLUDE_DIR}")
	list(APPEND SHSDK_LIBRARIES "${DirectX9_LIBRARIES}" "${XInput_LIBRARIES}" "${XAudio_LIBRARY}")

else ()

	# TODO

	message("Platform not supported")

endif()

include(FindPackageHandleStandardArgs)

FIND_PACKAGE_HANDLE_STANDARD_ARGS(ShSDK DEFAULT_MSG SHSDK_LIBRARIES SHSDK_EDITOR_LIBRARIES SHSDK_INCLUDE_DIRS)

